{"name":"Memprof","tagline":"A memory profiler for Python","body":"\r\n`memprof` logs and plots the memory usage of all the variables during the execution of the decorated methods.\r\n\r\n## Installation\r\n### Stable\r\n    sudo pip install memprof\r\n    \r\nor\r\n\r\n    sudo easy_install memprof\r\n    \r\n### Development\r\n    \r\n    git clone git://github.com/jmdana/memprof.git\r\n    cd memprof\r\n    sudo python setup.py install\r\n\r\n## Usage\r\n\r\nUsing `memprof` is as easy as adding a decorator to the methods that you want to profile:\r\n\r\n    @memprof\r\n    def foo():\r\n    \r\nAnd importing the module just by including the line below at the beginning of your Python file:\r\n\r\n    from memprof import *\r\n\r\nNow you can run as usual and logfiles with the names of your methods will be created (e.g. `foo.log`).\r\n\r\n### Generating plots\r\n\r\nThe logfiles are not very interesting so you might prefer to use the `-p`/`--plot` flag:\r\n    \r\n    python -m memprof --plot <python_file>\r\n    python -m memprof -p <python_file>\r\n    \r\nWhich, in addition to the logfile, will generate a plot (`foo.png`):\r\n\r\n![Image](examples/foo.png)\r\n\r\nThe grey bar indicates that the `foo` method wasn't running at that point.\r\n\r\nThe flag may also be passed as an argument to the decorator:\r\n\r\n    @memprof(charts = True)\r\n\r\nPlease keep in mind that the former takes precedence over the latter.\r\n\r\n### Adjusting the threshold\r\n\r\nYou may also want to specify a `threshold`. The value will be the minimum size for a variable to appear in the plot (but it will always appear in the logfile!). The default value is 1048576 (1 MB) but you can specify a different `threshold` (in bytes) with the `-t`/`--threshold` flag:\r\n\r\n    python -m memprof --threshold 1024 <python_file>\r\n    python -m memprof -t 1024 <python_file>\r\n    \r\nThe `threshold` may also be passed as an argument to the decorator:\r\n\r\n    @memprof(threshold = 1024)\r\n\r\nPlease keep in mind that the former takes precedence over the latter.    \r\n\r\n### mp_plot \r\n\r\nIf, after running `memprof`, you want to change the threshold and generate a new plot (or you forgot to use the `-p`/`--plot` flag with `memprof`), you don't have to re-run! Just call the command:\r\n    \r\n    mp_plot.py [-h] [-t THRESHOLD] logfiles [logfiles ...]\r\n    \r\nand generate the plots again doing something like:\r\n\r\n    mp_plot.py -t 128 logfile1.log logfile2.log   \r\n    \r\nor:\r\n \r\n    mp_plot.py -t 1024 *.log\r\n    \r\netc.\r\n\r\n\r\n---\r\nCopyright 2013, Jose M. Dana\r\n\r\n","google":"UA-41831729-1","note":"Don't delete this file! It's used internally to help with page regeneration."}